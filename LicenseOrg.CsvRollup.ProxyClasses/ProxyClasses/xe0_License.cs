// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace LicenseOrg.CsvRollup.ProxyClasses
{
    [EntityLogicalNameAttribute("xe0_license")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class xe0_License : BaseProxyClass
    {
        public new const string LogicalName = "xe0_license";
        public const int ObjectTypeCode = 10014;
        public const string PrimaryIdAttribute = "xe0_licenseid";
        public const string PrimaryNameAttribute = "xe0_name";
        
        static xe0_License()
        {
            BaseProxyClass.RegisterProxyType(typeof(xe0_License), "xe0_license");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public xe0_License() : base(new Entity("xe0_license")) { }
        public xe0_License(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<xe0_License>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: xe0_contactidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_contactidyominame")]
public string xe0_ContactIdYomiName
{
	get { return this.GetPropertyValue<string>("xe0_contactidyominame"); }
}
///<summary>
///<para>Logical Name: xe0_accountidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_accountidname")]
public string xe0_AccountIdName
{
	get { return this.GetPropertyValue<string>("xe0_accountidname"); }
}
///<summary>
///<para>Logical Name: xe0_accountidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_accountidyominame")]
public string xe0_AccountIdYomiName
{
	get { return this.GetPropertyValue<string>("xe0_accountidyominame"); }
}
///<summary>
///<para>Logical Name: xe0_productidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_productidname")]
public string xe0_ProductIdName
{
	get { return this.GetPropertyValue<string>("xe0_productidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: xe0_contactidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_contactidname")]
public string xe0_ContactIdName
{
	get { return this.GetPropertyValue<string>("xe0_contactidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: xe0_licensetypeidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_licensetypeidname")]
public string xe0_LicenseTypeIdName
{
	get { return this.GetPropertyValue<string>("xe0_licensetypeidname"); }
}
///<summary>
///<para>Logical Name: xe0_signingkeyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_signingkeyidname")]
public string xe0_SigningKeyIdName
{
	get { return this.GetPropertyValue<string>("xe0_signingkeyidname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: xe0_accountid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_accountid")]
public EntityReference xe0_AccountId
{
	get { return this.GetPropertyValue<EntityReference>("xe0_accountid"); }
	set { this.SetPropertyValue<EntityReference>("xe0_accountid", value, "xe0_AccountId"); }
}
///<summary>
///<para>Logical Name: xe0_contactid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_contactid")]
public EntityReference xe0_ContactId
{
	get { return this.GetPropertyValue<EntityReference>("xe0_contactid"); }
	set { this.SetPropertyValue<EntityReference>("xe0_contactid", value, "xe0_ContactId"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedOnBehalfBy
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: xe0_expirationdate</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_expirationdate")]
public DateTime? xe0_ExpirationDate
{
	get { return this.GetPropertyValue<DateTime?>("xe0_expirationdate"); }
	set { this.SetPropertyValue<DateTime?>("xe0_expirationdate", value, "xe0_ExpirationDate"); }
}
///<summary>
///<para>Logical Name: xe0_generatelicense</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_generatelicense")]
public bool? xe0_GenerateLicense
{
	get { return this.GetPropertyValue<bool?>("xe0_generatelicense"); }
	set { this.SetPropertyValue<bool?>("xe0_generatelicense", value, "xe0_GenerateLicense"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: xe0_issuedate</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_issuedate")]
public DateTime? xe0_IssueDate
{
	get { return this.GetPropertyValue<DateTime?>("xe0_issuedate"); }
	set { this.SetPropertyValue<DateTime?>("xe0_issuedate", value, "xe0_IssueDate"); }
}
///<summary>
///<para>Logical Name: xe0_key</para>
///<para>Max Length: 36 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_key")]
public string xe0_Key
{
	get { return this.GetPropertyValue<string>("xe0_key"); }
	set { this.SetPropertyValue("xe0_key", value, 36, "xe0_Key"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: xe0_licenseid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_licenseid")]
public Guid xe0_LicenseId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedOnBehalfBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: xe0_name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_name")]
public string xe0_Name
{
	get { return this.GetPropertyValue<string>("xe0_name"); }
	set { this.SetPropertyValue("xe0_name", value, 100, "xe0_Name"); }
}
///<summary>
///<para>Logical Name: xe0_orgs</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_orgs")]
public string xe0_Orgs
{
	get { return this.GetPropertyValue<string>("xe0_orgs"); }
	set { this.SetPropertyValue("xe0_orgs", value, 2000, "xe0_Orgs"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference OwnerId
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "OwnerId"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: xe0_productid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_productid")]
public EntityReference xe0_ProductId
{
	get { return this.GetPropertyValue<EntityReference>("xe0_productid"); }
	set { this.SetPropertyValue<EntityReference>("xe0_productid", value, "xe0_ProductId"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? OverriddenCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "OverriddenCreatedOn"); }
}
///<summary>
///<para>Logical Name: xe0_signingkeyid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_signingkeyid")]
public EntityReference xe0_SigningKeyId
{
	get { return this.GetPropertyValue<EntityReference>("xe0_signingkeyid"); }
	set { this.SetPropertyValue<EntityReference>("xe0_signingkeyid", value, "xe0_SigningKeyId"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? statecode
{
	get
	{
		if (statecode_OptionSetValue != null) { return (eStatus)statecode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.statecode_OptionSetValue = new OptionSetValue((int)value); }
		else this.statecode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue statecode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "statecode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string statecode_Text(IOrganizationService Service)
{
	return this.statecode_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string statecode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.statecode_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? statuscode
{
	get
	{
		if (statuscode_OptionSetValue != null) { return (eStatusReason)statuscode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.statuscode_OptionSetValue = new OptionSetValue((int)value); }
		else this.statuscode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue statuscode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "statuscode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string statuscode_Text(IOrganizationService Service)
{
	return this.statuscode_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string statuscode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.statuscode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: xe0_trialduration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_trialduration")]
public int? xe0_TrialDuration
{
	get { return this.GetPropertyValue<int?>("xe0_trialduration"); }
	set { this.SetPropertyValue("xe0_trialduration", (int?)value, (int)0, (int)2147483647, "xe0_TrialDuration"); }
}
///<summary>
///<para>Logical Name: xe0_licensetypeid</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_licensetypeid")]
public EntityReference xe0_LicenseTypeId
{
	get { return this.GetPropertyValue<EntityReference>("xe0_licensetypeid"); }
	set { this.SetPropertyValue<EntityReference>("xe0_licensetypeid", value, "xe0_LicenseTypeId"); }
}
///<summary>
///<para>Logical Name: xe0_usercount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_usercount")]
public int? xe0_UserCount
{
	get { return this.GetPropertyValue<int?>("xe0_usercount"); }
	set { this.SetPropertyValue("xe0_usercount", (int?)value, (int)0, (int)2147483647, "xe0_UserCount"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: xe0_xml</para>
///<para>Max Length: 8000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("xe0_xml")]
public string xe0_Xml
{
	get { return this.GetPropertyValue<string>("xe0_xml"); }
	set { this.SetPropertyValue("xe0_xml", value, 8000, "xe0_Xml"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ActivityPointers</para>
/// </summary>
public List<Entity> xe0_license_ActivityPointers (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ActivityPointers</para>
/// </summary>
public List<Entity> xe0_license_ActivityPointers (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity (Regarding)</b></para>
/// <para>Schema Name: xe0_license_Annotations</para>
/// </summary>
public List<Entity> xe0_license_Annotations (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Entity (Regarding)</b></para>
/// <para>Schema Name: xe0_license_Annotations</para>
/// </summary>
public List<Entity> xe0_license_Annotations (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Appointments</para>
/// </summary>
public List<Entity> xe0_license_Appointments (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Appointments</para>
/// </summary>
public List<Entity> xe0_license_Appointments (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_AsyncOperations</para>
/// </summary>
public List<Entity> xe0_license_AsyncOperations (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_AsyncOperations</para>
/// </summary>
public List<Entity> xe0_license_AsyncOperations (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_BulkDeleteFailures</para>
/// </summary>
public List<Entity> xe0_license_BulkDeleteFailures (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_BulkDeleteFailures</para>
/// </summary>
public List<Entity> xe0_license_BulkDeleteFailures (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_connections1</para>
/// </summary>
public List<Entity> xe0_license_connections1 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_connections1</para>
/// </summary>
public List<Entity> xe0_license_connections1 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_connections2</para>
/// </summary>
public List<Entity> xe0_license_connections2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_connections2</para>
/// </summary>
public List<Entity> xe0_license_connections2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> xe0_license_DuplicateBaseRecord (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> xe0_license_DuplicateBaseRecord (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> xe0_license_DuplicateMatchingRecord (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> xe0_license_DuplicateMatchingRecord (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity (Regarding)</b></para>
/// <para>Schema Name: xe0_license_Emails</para>
/// </summary>
public List<Entity> xe0_license_Emails (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity (Regarding)</b></para>
/// <para>Schema Name: xe0_license_Emails</para>
/// </summary>
public List<Entity> xe0_license_Emails (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Faxes</para>
/// </summary>
public List<Entity> xe0_license_Faxes (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Faxes</para>
/// </summary>
public List<Entity> xe0_license_Faxes (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Feedback</para>
/// </summary>
public List<Entity> xe0_license_Feedback (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "feedback", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Feedback</para>
/// </summary>
public List<Entity> xe0_license_Feedback (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "feedback", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Letters</para>
/// </summary>
public List<Entity> xe0_license_Letters (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Letters</para>
/// </summary>
public List<Entity> xe0_license_Letters (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_MailboxTrackingFolders</para>
/// </summary>
public List<Entity> xe0_license_MailboxTrackingFolders (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_MailboxTrackingFolders</para>
/// </summary>
public List<Entity> xe0_license_MailboxTrackingFolders (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_PhoneCalls</para>
/// </summary>
public List<Entity> xe0_license_PhoneCalls (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_PhoneCalls</para>
/// </summary>
public List<Entity> xe0_license_PhoneCalls (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<Entity> xe0_license_PrincipalObjectAttributeAccesses (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<Entity> xe0_license_PrincipalObjectAttributeAccesses (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ProcessSession</para>
/// </summary>
public List<Entity> xe0_license_ProcessSession (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ProcessSession</para>
/// </summary>
public List<Entity> xe0_license_ProcessSession (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_RecurringAppointmentMasters</para>
/// </summary>
public List<Entity> xe0_license_RecurringAppointmentMasters (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_RecurringAppointmentMasters</para>
/// </summary>
public List<Entity> xe0_license_RecurringAppointmentMasters (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ServiceAppointments</para>
/// </summary>
public List<Entity> xe0_license_ServiceAppointments (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_ServiceAppointments</para>
/// </summary>
public List<Entity> xe0_license_ServiceAppointments (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_SocialActivities</para>
/// </summary>
public List<Entity> xe0_license_SocialActivities (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_SocialActivities</para>
/// </summary>
public List<Entity> xe0_license_SocialActivities (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_SyncErrors</para>
/// </summary>
public List<Entity> xe0_license_SyncErrors (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_SyncErrors</para>
/// </summary>
public List<Entity> xe0_license_SyncErrors (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Tasks</para>
/// </summary>
public List<Entity> xe0_license_Tasks (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_Tasks</para>
/// </summary>
public List<Entity> xe0_license_Tasks (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_UserEntityInstanceDatas</para>
/// </summary>
public List<Entity> xe0_license_UserEntityInstanceDatas (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: xe0_license_UserEntityInstanceDatas</para>
/// </summary>
public List<Entity> xe0_license_UserEntityInstanceDatas (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>xe0_LicenseOrg (License)</b></para>
/// <para>Schema Name: xe0_xe0_license_xe0_licenseorg</para>
/// </summary>
public List<xe0_LicenseOrg> xe0_xe0_license_xe0_licenseorg (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<xe0_LicenseOrg>(Service, this.Id, "xe0_licenseorg", "xe0_licenseid", Columns); }
/// <summary>
/// <para><b>xe0_LicenseOrg (License)</b></para>
/// <para>Schema Name: xe0_xe0_license_xe0_licenseorg</para>
/// </summary>
public List<xe0_LicenseOrg> xe0_xe0_license_xe0_licenseorg (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<xe0_LicenseOrg>(Service, this.Id, "xe0_licenseorg", "xe0_licenseid", Columns); }
/// <summary>
/// <para><b>Entity (License)</b></para>
/// <para>Schema Name: xe0_xe0_license_xe0_licenseuser</para>
/// </summary>
public List<Entity> xe0_xe0_license_xe0_licenseuser (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "xe0_licenseuser", "xe0_licenseid", Columns); }
/// <summary>
/// <para><b>Entity (License)</b></para>
/// <para>Schema Name: xe0_xe0_license_xe0_licenseuser</para>
/// </summary>
public List<Entity> xe0_xe0_license_xe0_licenseuser (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "xe0_licenseuser", "xe0_licenseid", Columns); }


        

        

        public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>xe0_contactidyominame</para>
	/// <para>xe0_contactidyominame</para></summary>
	public const string xe0_ContactIdYomiName = "xe0_contactidyominame";
	/// <summary><para>xe0_accountidname</para>
	/// <para>xe0_accountidname</para></summary>
	public const string xe0_AccountIdName = "xe0_accountidname";
	/// <summary><para>xe0_accountidyominame</para>
	/// <para>xe0_accountidyominame</para></summary>
	public const string xe0_AccountIdYomiName = "xe0_accountidyominame";
	/// <summary><para>xe0_productidname</para>
	/// <para>xe0_productidname</para></summary>
	public const string xe0_ProductIdName = "xe0_productidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>xe0_contactidname</para>
	/// <para>xe0_contactidname</para></summary>
	public const string xe0_ContactIdName = "xe0_contactidname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>xe0_licensetypeidname</para>
	/// <para>xe0_licensetypeidname</para></summary>
	public const string xe0_LicenseTypeIdName = "xe0_licensetypeidname";
	/// <summary><para>xe0_signingkeyidname</para>
	/// <para>xe0_signingkeyidname</para></summary>
	public const string xe0_SigningKeyIdName = "xe0_signingkeyidname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>Account</para>
	/// <para>xe0_accountid</para></summary>
	public const string xe0_AccountId = "xe0_accountid";
	/// <summary><para>Contact</para>
	/// <para>xe0_contactid</para></summary>
	public const string xe0_ContactId = "xe0_contactid";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedOnBehalfBy = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Expiration Date</para>
	/// <para>xe0_expirationdate</para></summary>
	public const string xe0_ExpirationDate = "xe0_expirationdate";
	/// <summary><para>Generate License</para>
	/// <para>xe0_generatelicense</para></summary>
	public const string xe0_GenerateLicense = "xe0_generatelicense";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Issue Date</para>
	/// <para>xe0_issuedate</para></summary>
	public const string xe0_IssueDate = "xe0_issuedate";
	/// <summary><para>Key</para>
	/// <para>xe0_key</para></summary>
	public const string xe0_Key = "xe0_key";
	/// <summary><para>License</para>
	/// <para>xe0_licenseid</para></summary>
	public const string xe0_LicenseId = "xe0_licenseid";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>xe0_name</para></summary>
	public const string xe0_Name = "xe0_name";
	/// <summary><para>Org(s)</para>
	/// <para>xe0_orgs</para></summary>
	public const string xe0_Orgs = "xe0_orgs";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string OwnerId = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Product</para>
	/// <para>xe0_productid</para></summary>
	public const string xe0_ProductId = "xe0_productid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string OverriddenCreatedOn = "overriddencreatedon";
	/// <summary><para>Signing Key</para>
	/// <para>xe0_signingkeyid</para></summary>
	public const string xe0_SigningKeyId = "xe0_signingkeyid";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string statecode = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string statuscode = "statuscode";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Trial Duration (days)</para>
	/// <para>xe0_trialduration</para></summary>
	public const string xe0_TrialDuration = "xe0_trialduration";
	/// <summary><para>Type</para>
	/// <para>xe0_licensetypeid</para></summary>
	public const string xe0_LicenseTypeId = "xe0_licensetypeid";
	/// <summary><para>User Count</para>
	/// <para>xe0_usercount</para></summary>
	public const string xe0_UserCount = "xe0_usercount";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Xml</para>
	/// <para>xe0_xml</para></summary>
	public const string xe0_Xml = "xe0_xml";
}

    }
}
